/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js'
import { Contract, ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import { ContractEvent, Callback, TransactionObject, BlockType } from './types'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

export class BurnAuction extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions)

  clone(): BurnAuction

  methods: {
    bid(slotIndex: number | string): TransactionObject<void>

    ownerForSlot(slotIndex: number | string): TransactionObject<string>

    activeForger(): TransactionObject<string>

    calcSlotStart(slotIndex: number | string): TransactionObject<string>

    currentSlot(): TransactionObject<string>

    refund(): TransactionObject<void>

    isStaked(owner: string): TransactionObject<boolean>

    transfer(recipient: string): TransactionObject<void>

    register(): TransactionObject<void>

    isProposable(proposer: string): TransactionObject<boolean>

    max(a: number | string, b: number | string): TransactionObject<string>
  }

  events: {
    allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
  }
}
