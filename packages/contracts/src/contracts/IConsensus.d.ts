/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js'
import { Contract, ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import { ContractEvent, Callback, TransactionObject, BlockType } from './types'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

export class IConsensus extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions)

  clone(): IConsensus

  methods: {
    register(): TransactionObject<void>

    deregister(): TransactionObject<void>

    stake(coordinator: string): TransactionObject<void>

    isProposable(proposerAddr: string): TransactionObject<boolean>

    transfer(recipient: string): TransactionObject<void>

    bid(roundIndex: number | string): TransactionObject<void>

    minNextBid(roundIndex: number | string): TransactionObject<string>

    coordinatorForRound(roundIndex: number | string): TransactionObject<string>

    activeCoordinator(): TransactionObject<string>

    currentRound(): TransactionObject<string>

    refund(): TransactionObject<void>

    refundAddress(owner: string): TransactionObject<void>
  }

  events: {
    NewHighBid: ContractEvent<{
      roundIndex: string
      bidder: string
      amount: string
      0: string
      1: string
      2: string
    }>
    allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
  }
}
