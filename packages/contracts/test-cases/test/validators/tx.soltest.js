/* eslint-disable jest/valid-expect */
/* eslint-disable no-unused-expressions */
/* eslint-disable jest/prefer-todo */
/* eslint-disable jest/require-top-level-describe */
/* eslint-disable jest/consistent-test-it */

const chai = require('chai')
const { reverse } = require('dns')
const fs = require('fs')
const path = require('path')
const { Block } = require('~core/block')

const { expect } = chai
const { toBN } = web3.utils

const TxValidatorTester = artifacts.require('TxValidatorTester')

const compare = (a, b) => {
  expect(toBN(a).toString()).equal(toBN(b).toString())
}

function loadVkJsonFiles() {
  const vks = {
    1: {},
    2: {},
    3: {},
    4: {},
  }
  const nIn = [1, 2, 3, 4]
  const nOut = [1, 2, 3, 4]
  nIn.forEach(i => {
    nOut.forEach(j => {
      const vkPath = path.join(
        __dirname,
        `../../../keys/vks/zk_transaction_${i}_${j}.vk.json`,
      )
      const vk = JSON.parse(fs.readFileSync(vkPath))
      vks[i][j] = vk
    })
  })
  return vks
}

// const block1 = '0x3ede5cd30000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000019890f8bf6a479f320ead074411a4b0e7944ea8c9c1b66b9f253a7e3668f47722307888989de3db72da47ca6d0fdc82dbf9957e6ae20000000000000000000000000000000000000000000000000011c37937e08000256d0d45b8bb95068dd588157cb4b12f0e3aa6bed3ca3a5d732670d03ff7198e0000000000000000000000000000000000000000000000000000000000000020bdaf0a25a0628973d4df7e4c053cda1318b39801d3f0fba827ebe792ec12cbfaf9295a686647cb999090819cda700820c282c613cedcd218540bbc6f37b01c650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000065c5a0a771b8d461c5cea5d67fbf249426c910bf0781f858eda973a4c1110c940000000000000000000000000000000000000000000000000000000000000000000001b45dfa19e39142a385fd7ed605afa53e4dbc5e7f5bfd4e49fee1d2ba8bbfc7620000000000000000000000000000000000000000000000000011c37937e08000000000000000000000'
// const sampleBlock =
//   '0x90f8bf6a479f320ead074411a4b0e7944ea8c9c12b06de6ba157b7268527518b753e5d67ef6830d0c1567c35fb05ca89027be01e000000000000000000000000000000000000000000000000022e219e1e36c0001a068e769c49a646c1b0caa94c6dd20e8246e79204aba2b359aca4b0e058be0000000000000000000000000000000000000000000000000000000000000000401304ce48ff9734d243a4c8b5c3a776d2e9f4f750033528ed069d8705927b2468f9295a686647cb999090819cda700820c282c613cedcd218540bbc6f37b01c650000000000000000000000000000000000000000000000000000000000000000cb165f0ac0dfcdf39c9e12af9c2217f182bc96d55479deb8d3338792729e745e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000302256d0d45b8bb95068dd588157cb4b12f0e3aa6bed3ca3a5d732670d03ff7198e036385aaa27fc0b1a0620a4d9a894edc45ff3a54406aa0b27f4a4e58b9cd3967256d0d45b8bb95068dd588157cb4b12f0e3aa6bed3ca3a5d732670d03ff7198e22f255211ec8e9005aabbb783735634fda317fc5a6f47f851848a4770a4d688e0317a210e76179d69f9d0699a811f75e69a2b408ba67493f884f05aaa6a47ca0d7001a88f626bcc5c65f000f6e264eba944ee4000d921fea71ff43446755e78e6bd500010341bb21f1f7bfc1c706657d04723426f6c3ee1572da92ad11115ba6fce0110000000000000000000000000000000000000000000000000000c970597ec3c00029fff01ad32b728f7993d18b8ef033ea10c7f133e7c574f0ba11fd46fd943ff22640fb91e7166c4fbde6fe2b70af352f7323274f5d18cd4d68ae4dc2c2a58cda1d14c97674262507c0ccd1635c5530d445b43518d7f29543702b4d115fe4af7506b5c0cef91ef2c38f9ab0168c5caffdc9e39f233e93942d366f81b48b0177e3266a390ef39545eeebb4d94bc15801ef3cfbad46e1ea51ad0e8ed509b71a7b110c3971d962661ccf31804813747582546a232f7b25b96bc633b389d2edb696202e447d123cfb4d101727b0a9c10a378e73db1cc1350929f1ef471d36813db2eb1562fba82d74fd5f4839115d6bd328e52963dddf01add3dc8e4c9b90c6d4cf3302acd7d8a6cb48ea5736f18255d1a0b15edbefbb716095b103cf63595aeef0de9e5f04f372c91d80d43e4d7a0410314087d43dd93a790059d00373e372b9a78e8a0aa1e65f06243596a27bebc8616b1a202302256d0d45b8bb95068dd588157cb4b12f0e3aa6bed3ca3a5d732670d03ff7198e1dbfa04b18f49600647a9d64aedeca505f6c479ecc0fc8f905f77dda067427e3256d0d45b8bb95068dd588157cb4b12f0e3aa6bed3ca3a5d732670d03ff7198e0c08b8006342c42b1284be8a8550eba58ed45e75a05ede9d76b5abb3f2038ebe0223eb7be036c1a407eab509ff6a0b226ccf424b9797f64c6a668fe86ffe47997f002e6969470055d0320ddbc09dd4a98023e22d831e044bda210166dcead7351d2f0000000000000000000000000000000000000000000000000000bdb7045f01800016ba29aa23a585f2652b8fa51cf6905a5718593088ea52189c65d8eb7cd0daf8272e81e92fab80a21d1148ba2a5d28a4b0d3613a0a9fe811276f71c0606dee4c1c43dbe4fb9457976928376fea72e69714e6e13c1ddbe9cadc788c6fcd9e3a13054943f00d562526eb36712aa6831ad58c4e989930d2f7b5d7cfa237136334d8103c335fe89a9bf67408594f2cd047e12125d60e038b31ec41e05ff4712df9d800b516717082b3a03bbbc74d79374598b43c7e17f733f89b8a66973b1e3ffd412742b0e7db9c98bdcdea0fa89573edd7ece59244c2f7f146138eb356ef9620f70540c4f8201a7fb0980b958eab3e07403b12bc2687a662c45824f38bbff8022d02935ab03127411a35e502381c3b09df283a5ba7efd4467cf80b7625fcef861e1c4f65f22689737cd712d823bc3841a6c231e069068b57c8889e7abfbff54b83a9bf22d1d401f76596867fff91b07ed30fa701256d0d45b8bb95068dd588157cb4b12f0e3aa6bed3ca3a5d732670d03ff7198e121cb51183028d62568e6094d8f2bfec9b42f6cad1fac5f0618331690c0ccffb020cad640bc8b01f77fe4191b8cab13c5860c62339465eb157d914ae6b27aa7183001991dd594ef90e50badbe2562c688b98aecde09abd318a85e4e94ac0756a07640000000000000000000000000000000000000000000000000000a6fa40407180001ccd77054aec6186fcfe8b7a16e790f6ab3a2bb691ed99af41ee2e454694d2992ce428efd487128e434818036b8337f548bab944fdd25df6adf72d78cccf5e3a27def6dd92dac6c5e9d95a79f1d06b26b493dfc20babeef8b21b731095519c87056f12a86dcfe824cd83ec5fa391d23826859f9605c316bac6882a676d5a5d6c2e36272539bd08957fdd8d62143552890479f909898c3d8ba89264be3c12590e2398145acdd0e4c55692aa2b771bf6ef289bc1100a26fb32757a9305343b73722fa6ffcdb9f7646900a17add07e131fe38d6fd937ad400f3e9e7f496af1bfe14002c469639bed70f0249bc8f321e4cb9def35e8571e4aeeabfa7a498c5fce7b302f1ed9a53ccf50b8350aca5956a9839453dfeebf498c81ee16a65d88b56a0ba2e729600f89f6f10a7b52495d0a0b7d70fc351dfe0529eb3a53cbcdd66cbe7fbeb640ea7515b7440b98527f23b35dd975ab60000'

const sampleBlock =
  '0x90f8bf6a479f320ead074411a4b0e7944ea8c9c1cf2d5c004b85eb57c4b8b7c47cf91ba79d72e88fa1ed962bb72a2b09be944d80000000000000000000000000000000000000000000000000022e219e1e36c0001de95cdee3b08f093a37f74f5cc605d50c49b50fcf11f8a8c2cfcaccebb5a6ea00000000000000000000000000000000000000000000000000000000000000401304ce48ff9734d243a4c8b5c3a776d2e9f4f750033528ed069d8705927b2468f9295a686647cb999090819cda700820c282c613cedcd218540bbc6f37b01c6500000000000000000000000000000000000000000000000000000000000000002feb1e19d1491276e0df3149a8f53c1406dd3d354756d8532de332c5c1664abb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030221cae0c53a03e58b1c16c95a21e3baff228448a0434f3c87a92c3f037bea357f036385aaa27fc0b1a0620a4d9a894edc45ff3a54406aa0b27f4a4e58b9cd396721cae0c53a03e58b1c16c95a21e3baff228448a0434f3c87a92c3f037bea357f22f255211ec8e9005aabbb783735634fda317fc5a6f47f851848a4770a4d688e0329b2d9e2a588cb64218196e542529f2d8e81f4c915fb834df3abe00a2103f085000a59a6ee73939a3664b865b471cca6ce484957cf90ad82a852aec093a2230737000c519eafd8acca19bb10530561c9610dfd032388ed69bd0dc38f58c7ffd113070000000000000000000000000000000000000000000000000000c970597ec3c000147211a5890539195e56e94b526de06cc82a668fbee5a250a67839f00ca9a7f72e725932914e389129721c804cdf151666aed078cfc8ff5f2b75ed35e3235009029a2b33043ab46c10e3a5ef18564ba4eee33b536fc867f0411a58c5b8ac74f304ad6d68b9d9f5dfde5c61e4a16032391bf83eef85b3bb34b0158c7867ed9f3f13beff3f0e958346a44fc78a5a18f8eeb36864fdf8c54474fa948f202598808d2431eabb8c510acdfd1ccf0d52cf08f8aa88c79c9a02cae374f6043498f3d0370a68f984da76fba44c2006a18b0c99f6e1eb465a64eb9a6dd57335dfdf06a43a0158fe005c0dfe5bf05615e294e063cfc4aeeb13086947280ab0e56028b3ef7f02258fb1c298df33af9ef9911d6a200089f2d05e3d955e0daf5d5a915dda0c87a7ac00adc8ff6cb10203fb5f6ac222d99c7e4817e20d406683450c5831bb975b7387b94d09d0d361ae33f74fa0dd267e66160221cae0c53a03e58b1c16c95a21e3baff228448a0434f3c87a92c3f037bea357f1dbfa04b18f49600647a9d64aedeca505f6c479ecc0fc8f905f77dda067427e321cae0c53a03e58b1c16c95a21e3baff228448a0434f3c87a92c3f037bea357f0c08b8006342c42b1284be8a8550eba58ed45e75a05ede9d76b5abb3f2038ebe0205e9e8769ae1382e3d1a6d88aad5e11369d2adb3df5f9af163230e5b5efeb2330028fce669da67473e8271a4bbb765db7a406969191a527712749301a1059fac9d0000000000000000000000000000000000000000000000000000bdb7045f0180001947c4a1977081110908884febf1cabe6b6c8963f372d0e64e2dea92c7315bec08b72a90605bc911487a4e56c273a6a0cddec66710348ac0b6ccddd23cc9d6ad2fcfc6043931171a087295191cb27dc5f10a714079914f40d5ca6485d1e2008809c36c631b69b38b6dd435b3209dddb02fb3493cebf4bef1bd3dea19d8b5878a154a1715387cea89f4335ad64a8e68c6aa4b0bdb5f6faa9d0bae2af091c9f9c50cd7239a60c6ea89007e9968528fd8118e9abdac3eff1d3a29e46ad24293e0ef0d7afd9ad5159da42714d3fe2694a03b8b7d9f89cd673722564231362469d8172a12de5346d87fc701dabf9261177df0e039634506210f88207f894355b3ff2902f5bb427bb5295f26037e9eee6c6546541730a876fb125f740490dff44ea5b808ea11285e0031f79f479dc4bc02bb0cebf8f81fd5d7a8dcc561e5bc36d5f46db9f8b31155bbec4f21a1761d06970e349ec60121cae0c53a03e58b1c16c95a21e3baff228448a0434f3c87a92c3f037bea357f121cb51183028d62568e6094d8f2bfec9b42f6cad1fac5f0618331690c0ccffb0229b1f889f90dd9bde095fa2fc5556747d95712c238cfffda78a30bb4724ad0440012e43c1c85a83a252f60b09a8b9845bf73f5c573beaa430f9096a350916b3a540000000000000000000000000000000000000000000000000000a6fa40407180002bb331e10a639864b95ccd7251617b8fb9c0840e8809a902f19cdc88054837191a296b507bbd9c7f0419925799dcb4add9c854d68daf728af212a0837fd58ae12c7d78520de3c430ab2fdb439d2f915a1cc4db0315da0c5e3a15e0610533141a0521786b807031764362c89e2c9b4ce28669d7b81474519b917a8bbf19160819190c4d9129fdce74a55386ba1c13bb3877ae6e1d730e513d56c09f1ad94aa2391212189944f5f52c3ac0da78c47e98038974da0739487e6303e0b228f974e9ba12e8662dd39808095d840c9491b8fb8e7ad6553ec871cf71a2a82879f6fd74e72dbd434bc8b39480362afe3e2934b9a509fdc8249e33c341c88640fda586eb5c02e63b46c717a13c563f78c413714e81dbe8d36c663a2555b6a37f0586a3501512b91c6b5885674a278348ccc71aced3274aad6b6f7dc1731f53439d9308459618b6e8864a0cd572213fbba13288cdc160fa0000'
const block = Block.from(sampleBlock)

contract('SNARK verify test', async accounts => {
  let snarkTester
  let vks
  before(async () => {
    snarkTester = await TxValidatorTester.new()
    vks = loadVkJsonFiles()
    for (let i = 1; i <= 4; i += 1) {
      for (let j = 1; j <= 4; j += 1) {
        const vk = vks[i][j]
        // caution: snarkjs G2Point is reversed
        const receipt = await snarkTester.registerVk(i, j, {
          alpha1: { X: vk.vk_alpha_1[0], Y: vk.vk_alpha_1[1] },
          beta2: {
            X: vk.vk_beta_2[0].reverse(),
            Y: vk.vk_beta_2[1].reverse(),
          },
          gamma2: {
            X: vk.vk_gamma_2[0].reverse(),
            Y: vk.vk_gamma_2[1].reverse(),
          },
          delta2: {
            X: vk.vk_delta_2[0].reverse(),
            Y: vk.vk_delta_2[1].reverse(),
          },
          ic: vk.IC.map(ic => ({
            X: ic[0],
            Y: ic[1],
          })),
        })
      }
    }
  })
  describe('snark test', () => {
    it('serialization', async () => {
      const { proof } = block.body.txs[0]
      const result = await snarkTester.getProof(sampleBlock, 0)
      // toBN(result.a)
      compare(result.a.X, proof.pi_a[0])
      compare(result.a.Y, proof.pi_a[1])
      compare(result.b.X[0], proof.pi_b[0][1])
      compare(result.b.X[1], proof.pi_b[0][0])
      compare(result.b.Y[0], proof.pi_b[1][1])
      compare(result.b.Y[1], proof.pi_b[1][0])
      compare(result.c.X, proof.pi_c[0])
      compare(result.c.Y, proof.pi_c[1])
    })
    it('sample snark test', async () => {
      const result = await snarkTester.verifierTest()
      expect(result).to.be.true
    })
    it('tx snark test', async () => {
      const result1 = await snarkTester.validateSNARK(sampleBlock, 0)
      expect(result1.slash).to.be.false
      const result2 = await snarkTester.validateSNARK(sampleBlock, 1)
      expect(result2.slash).to.be.false
      const result3 = await snarkTester.validateSNARK(sampleBlock, 2)
      expect(result3.slash).to.be.false
    })
  })
})
